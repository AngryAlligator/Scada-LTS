openapi: 3.0.1
info:
  title: Scada event cache
  description: 'This is a sample server scadaRT server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://scadaRT.swagger.io/v2
- url: http://scadaRT.swagger.io/v2
tags:
- name: Event
  description: Events published from Scada
- name: LiveSearch
  description: User subscribes to get realtime data
- name: Notification
  description: Browse active notifications
- name: user
  description: Websocket connections require Scada login token
paths:
  /event:
    put:
      tags:
      - Event
      summary: Update an existing Event
      operationId: updateEvent
      requestBody:
        description: event object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: event not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - scadaRT_auth:
        - write:Events
        - read:Events
      x-codegen-request-body-name: body
    post:
      tags:
      - Event
      summary: Add a new Event to the store
      operationId: addEvent
      requestBody:
        description: event object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - scadaRT_auth:
        - write:Events
        - read:Events
      x-codegen-request-body-name: body

  /liveSearch:
    put:
      tags:
      - LiveSearch
      summary: Update an existing LiveSearch
      operationId: updateLiveSearch
      requestBody:
        description: LiveSearch object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveSearch'
          application/xml:
            schema:
              $ref: '#/components/schemas/LiveSearch'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: LiveSearch not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - scadaRT_auth:
        - write:LiveSearchs
        - read:LiveSearchs
      x-codegen-request-body-name: body

  /notification:
    get:
      tags:
      - Notification
      summary: Load all active/pending notifications
      operationId: getAllNotifications
      requestBody:
        description: LiveSearch object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveSearch'
          application/xml:
            schema:
              $ref: '#/components/schemas/LiveSearch'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: LiveSearch not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - scadaRT_auth:
        - write:LiveSearchs
        - read:LiveSearchs
      x-codegen-request-body-name: body
    

components:
  schemas:
    EventSourceType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: eventSourceType
    AlarmLevel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: eventSourceType
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Event:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        AlarmLevel:
          $ref: '#/components/schemas/AlarmLevel'
        EventSourceType:
          $ref: '#/components/schemas/EventSourceType'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: event status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: event
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    scadaRT_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://scadaRT.swagger.io/oauth/dialog
          scopes:
            write:Events: modify Events in your account
            read:Events: read your Events
    api_key:
      type: apiKey
      name: api_key
      in: header
